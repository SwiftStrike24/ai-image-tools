You are an expert in TypeScript, Node.js, Next.js 14 App Router, React, Shadcn UI, Radix UI, Tailwind CSS, and Framer Motion.

Code Style and Structure
- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content, types.

Naming Conventions
- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.

TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types.
- Avoid enums; use maps instead.
- Use functional components with TypeScript interfaces.

Syntax and Formatting
- Use the "function" keyword for pure functions.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
- Use declarative JSX.

UI and Styling
- Use Shadcn UI, Radix UI, and Tailwind CSS for components and styling.
- Implement responsive design with Tailwind CSS; use a mobile-first approach.
- Utilize custom components like ShimmerButton, AnimatedCheckmark, and GridPattern.
- Implement Framer Motion for animations and transitions.

Navigation and Layout
- Use the Dock component for consistent navigation across pages.
- Implement smooth scrolling for in-page navigation.
- Use Next.js Link component for client-side routing.

Performance Optimization
- Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
- Wrap client components in Suspense with fallback.
- Use dynamic loading for non-critical components.
- Optimize images: use WebP format, include size data, implement lazy loading.
- Implement virtualization for long lists using react-virtualized or react-window.

Error Handling
- Use try-catch blocks for async operations, especially in server actions.
- Provide user-friendly error messages using the toast component.
- Implement error boundaries for client-side error handling.

State Management
- Use React hooks for local state management.
- Implement useReducer for complex state logic.
- Use Vercel KV (Redis) for server-side state persistence.

API Integration
- Use server actions for data fetching and mutations.
- Implement proper error handling and loading states for API calls.
- Use the Replicate API for AI image generation and upscaling.

Authentication
- Use Clerk for user authentication and authorization.
- Implement proper access control in server actions and API routes.

Key Conventions
- Use 'nuqs' for URL search parameter state management.
- Optimize Web Vitals (LCP, CLS, FID).
- Limit 'use client':
  - Favor server components and Next.js SSR.
  - Use only for Web API access in small components.
  - Avoid for data fetching or state management.

Testing
- Implement unit tests for utility functions and hooks.
- Use React Testing Library for component testing.
- Implement end-to-end tests using Cypress or Playwright.

SEO and Analytics
- Implement proper meta tags and structured data for SEO.
- Use Vercel Analytics and Speed Insights for performance monitoring.

Accessibility
- Ensure all interactive elements are keyboard accessible.
- Use proper ARIA attributes where necessary.
- Implement focus management for modals and dialogs.

Custom Components and Features
- Use the Dock component for navigation, with hover effects and labels.
- Implement AnimatedGradientText for eye-catching headers.
- Use GridPattern for background visual effects.
- Implement BlurFade for smooth transitions between sections.
- Use MagicCard for visually appealing card components.
- Implement shadcn or magicui components for interactive and visually engaging buttons and other UI elements, like shimmer button, animated checkmark, etc.

Pricing and Subscription
- Use Stripe for handling payments and subscriptions.
- Implement a clear pricing structure with feature comparisons.
- Use dialogs for confirming subscription changes or downgrades.

Landing Page
- Implement a visually appealing and informative landing page.
- Use animations and transitions to enhance user experience.
- Include sections for features, how-to guides, and FAQs.

Follow Next.js docs for Data Fetching, Rendering, and Routing.