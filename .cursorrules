You are an expert in TypeScript, Node.js, Next.js 14 App Router, React, Shadcn UI, Radix UI, Tailwind CSS, and Framer Motion.

Code Style and Structure
- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content, types.
- Prioritize using existing files, especially for API routes in src/app/api folder, unless a new file is absolutely necessary for maintainability or separation of concerns.
- Always consider maintainability, manageability, and scalability when organizing code and creating new files or components.

Naming Conventions
- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.

TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types.
- Avoid enums; use maps instead.
- Use functional components with TypeScript interfaces.

Syntax and Formatting
- Use the "function" keyword for pure functions.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
- Use declarative JSX.
- Escape single quotes in JSX with &apos;, &lsquo;, &#39;, or &rsquo;.

UI and Styling
- Use Shadcn UI, Radix UI, and Tailwind CSS for components and styling.
- Implement responsive design with Tailwind CSS; use a mobile-first approach.
- Utilize custom components like ShimmerButton, AnimatedCheckmark, and GridPattern.
- Implement Framer Motion for animations and transitions.

Navigation and Layout
- Use the Dock component for consistent navigation across pages.
- Implement smooth scrolling for in-page navigation.
- Use Next.js Link component for client-side routing.

Performance Optimization
- Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
- Wrap client components in Suspense with fallback.
- Use dynamic loading for non-critical components.
- Optimize images: use WebP format, include size data, implement lazy loading.
- Implement virtualization for long lists using react-virtualized or react-window.

Error Handling
- Use try-catch blocks for async operations, especially in server actions.
- Provide user-friendly error messages using the toast component.
- Implement error boundaries for client-side error handling.

State Management
- Use React hooks for local state management.
- Implement useReducer for complex state logic.
- Use Vercel KV (Redis) for server-side state persistence.

API Integration
- Use server actions for data fetching and mutations.
- Implement proper error handling and loading states for API calls.
- Use the Replicate API for AI image generation and upscaling.

Authentication
- Use Clerk for user authentication and authorization.
- Implement proper access control in server actions and API routes.

Key Conventions
- Use 'nuqs' for URL search parameter state management.
- Optimize Web Vitals (LCP, CLS, FID).
- Limit 'use client':
  - Favor server components and Next.js SSR.
  - Use only for Web API access in small components.
  - Avoid for data fetching or state management.

Testing
- Implement unit tests for utility functions and hooks.
- Use React Testing Library for component testing.
- Implement end-to-end tests using Cypress or Playwright.

SEO and Analytics
- Implement proper meta tags and structured data for SEO.
- Use Vercel Analytics and Speed Insights for performance monitoring.

Accessibility
- Ensure all interactive elements are keyboard accessible.
- Use proper ARIA attributes where necessary.
- Implement focus management for modals and dialogs.

Custom Components and Features
- Use the Dock component for navigation, with hover effects and labels.
- Implement AnimatedGradientText for eye-catching headers.
- Use GridPattern for background visual effects.
- Implement BlurFade for smooth transitions between sections.
- Use MagicCard for visually appealing card components.
- Implement shadcn or magicui components for interactive and visually engaging buttons and other UI elements, like shimmer button, animated checkmark, etc.

Pricing and Subscription
- Use Stripe for handling payments and subscriptions.
- Implement a clear pricing structure with feature comparisons.
- Use dialogs for confirming subscription changes or downgrades.
- Handle immediate upgrades with prorated charges.
- Implement a two-step process for upgrades: calculate prorated amount, then confirm upgrade.
- Allow direct checkout for users on the basic (free) plan.
- Handle various scenarios in subscription management, including customer deletion and recreation.
- Implement robust error handling for all subscription-related operations.
- Use separate API routes for different subscription actions (upgrade, downgrade, cancel, etc.).
- Ensure proper handling of Stripe webhook events for real-time updates.
- Offer users the option to upgrade immediately or schedule for the next billing cycle:
  - Use a dual button layout: one for immediate upgrade, one for scheduled upgrade.
  - Keep the immediate upgrade button more prominent (e.g., purple), and the scheduled upgrade button less prominent (e.g., gray or lighter purple).
  - Show a confirmation modal for scheduled upgrades, explaining when the upgrade will occur.
  - Example layout:
    [Upgrade to Ultimate]  (Immediate Upgrade)
    [Schedule Upgrade for Next Billing Cycle]  (Less prominent color)
- Maintain clear visual hierarchy and distinction between immediate and scheduled upgrade options.
- Provide clear explanations in confirmation modals for both immediate and scheduled upgrades.

Subscription Management
- Implement robust subscription management with Stripe API.
- Use Redis for caching subscription data and managing pending downgrades.
- Provide clear UI for subscription information and changes.
- Handle subscription upgrades, downgrades, and cancellations.
- Implement Stripe webhooks for real-time data synchronization.
- Ensure proper handling of edge cases, such as deleted Stripe customers.
- Implement a two-step upgrade process: first calculate prorated amount, then confirm upgrade.
- Allow direct checkout for users on the basic (free) plan without showing upgrade confirmation.
- Handle subscription changes in both the frontend and backend consistently.
- Support both immediate and scheduled upgrades, updating the UI and backend logic accordingly.

State Management and Data Persistence
- Use React hooks for local state, Redis for server-side persistence.
- Implement error handling and loading states for API calls and state updates.
- Use Supabase for long-term data storage and subscription tracking.
- Ensure consistency between Redis, Supabase, and Stripe data.

API Routes and Server Actions
- Organize API routes logically in the src/app/api folder.
- Implement server actions for data mutations and subscription changes.
- Ensure consistent error handling and response formatting across all API routes.
- Use separate routes for different subscription actions (e.g., upgrade, downgrade, cancel).
- Implement proper authentication and authorization checks in all routes.

Webhook Handling
- Implement robust handling of Stripe events in the webhook route.
- Ensure idempotency in webhook processing to prevent duplicate actions.
- Log webhook events for debugging and auditing purposes.
- Handle various Stripe events including checkout completion, subscription changes, and customer deletion.
- Update Redis and Supabase data based on webhook events to maintain data consistency.

Code Organization
- Centralize subscription logic in dedicated files or hooks.
- Maintain consistent naming conventions across the project.
- Create reusable helper functions for common operations.
- Use clear and descriptive variable names, especially for subscription-related data.

Security
- Implement proper authentication and authorization checks in all routes.
- Use environment variables for sensitive information, including Stripe API keys and webhook secrets.
- Implement rate limiting on API routes to prevent abuse.
- Ensure secure handling of user data and payment information.

Logging and Monitoring
- Implement comprehensive logging for debugging and monitoring.
- Use error tracking services to catch and diagnose issues in production.
- Log important events in subscription management for auditing purposes.

Continuous Optimization
- Regularly review and optimize existing code for performance and maintainability.
- Stay updated with the latest best practices in Next.js, React, and Stripe integration.
- Continuously improve error handling and edge case management in subscription flows.

User Experience
- Provide clear and informative messages to users during subscription changes.
- Implement loading states and proper error handling in the UI for subscription actions.
- Ensure responsive design for pricing and subscription management components.
- Use modals or dialogs for important subscription-related confirmations.
- Offer clear options for immediate upgrades and scheduled upgrades at the next billing cycle.
- Use visual cues (like button colors and placement) to differentiate between upgrade options.
- Provide detailed information in confirmation modals about when changes will take effect.
- For scheduled upgrades:
  - Show a confirmation modal explaining that the upgrade will occur on the next billing date.
  - Include any applicable terms or changes in the confirmation modal.
  - Ensure users can easily differentiate between immediate and scheduled upgrade options.

